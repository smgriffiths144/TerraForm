# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_DEFAULT_OUTPUT: json
  #AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs terraform init
      - name: Run terraform init
        if: always()
        run: terraform init

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        if: always()
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          terraform plan
          
  Run-on-MacOS:
    name: test on MacOS
    runs-on: macos-latest
    # These permissions are needed to interact with GitHubâ€™s OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Terraform
        run: |
            brew tap hashicorp/tap
            brew install hashicorp/tap/terraform
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          ## the following creates an ARN based on the values entered into github secrets
          #role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOY_ROLE }}
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE }}
          role-session-name: myGitHubActions
      - name: Test Terraform
        run: |
            terraform --version
            echo testing123
            echo $AWS_ACCESS_KEY_ID
            echo $AWS_DEFAULT_REGION
            terraform init
            terraform plan
            terraform apply --auto-approve
  
  run-in-a-container:
    name: test container
    runs-on: ubuntu-latest
    container:
      image: node:18
      env:
        NODE_ENV: development
      ports:
        - 80
      volumes:
        - my_docker_volume:/volume_mount
      options: --cpus 1
    steps:
      - name: Check for dockerenv file
        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)
        
  tfsec-scan:
    name: tfsec-scan
    runs-on: ubuntu-latest
    container:
      image: aquasec/tfsec-ci
      env:
        NODE_ENV: development
      volumes:
        - my_docker_volume:/volume_mount
      options: --cpus 1
    steps:
      - name: run tfsec
        run: |
            pwd
            ls -alh
            sudo tfsec -f junit --out tfsec.test.xml
      - name: run tfsec
        run: cat /voulume_mount/tfsec.test.xml
    
 
